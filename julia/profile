2020年 5月 8日 金曜日 19時02分54秒 JST
Variables
  #self#::Core.Compiler.Const(multi_loop_update!, false)
  loop_updater::LoopUpdater{Tuple{Float64,Float64,Float64}}
  num_trial::Int64
  updater::SingleSpinFlipUpdater
  beta::Float64
  max_length::Int64
  spins::Array{Tuple{Float64,Float64,Float64},1}
  verbose::Bool
  work::ARRAY{INT64,N} WHERE N
  spins_idx_on_loop::ARRAY{UINT64,N} WHERE N
  new_spins_on_loop::ARRAY{TUPLE{FLOAT64,FLOAT64,FLOAT64},N} WHERE N
  num_spins::Int64
  max_coord_num::ANY
  dE::Float64
  num_accept::Int64
  num_loop_found::Int64
  @_17::UNION{NOTHING, TUPLE{INT64,INT64}}
  i::Int64
  t1_s::UInt64
  first_spin_idx::Int64
  candidate_second_spin_idx::ANY
  nn_coord_num::UInt16
  @_23::UNION{NOTHING, TUPLE{INT64,INT64}}
  second_spin_idx::ANY
  loop_length::Int64
  @_26::Int64
  sum_boundary_spins::Tuple{Float64,Float64,Float64}
  t1_e::UInt64
  t2_s::UInt64
  before_flipped_spins::Array{Tuple{Float64,Float64,Float64},1}
  dE_loop::Float64
  temp_r::Float64
  t2_e::UInt64
  t3_s::UInt64
  cp_spins_idx_on_loop::Array{UInt64,1}
  first_spin_idx_inv::UInt64
  second_spin_idx_inv::UInt64
  loop_length_inv::Int64
  @_39::Int64
  sum_boundary_spins_inv::Tuple{Float64,Float64,Float64}
  t3_e::UInt64
  ins::Int64
  @_43::Bool
  @_44::Bool

Body::Tuple{Float64,Float64,Float64}
1 ──        (work = Base.getproperty(loop_updater, :work))
│           (spins_idx_on_loop = Base.getproperty(loop_updater, :spins_on_loop))
│           (new_spins_on_loop = Base.getproperty(loop_updater, :new_spins))
│           (num_spins = Base.getproperty(updater, :num_spins))
│    %5   = Base.getproperty(updater, :coord_num)::ARRAY{UINT16,N} WHERE N
│           (max_coord_num = Main.maximum(%5))
│           (dE = 0.0)
│           (num_accept = 0)
│           (num_loop_found = 0)
│    %10  = (1:num_trial)::Core.Compiler.PartialStruct(UnitRange{Int64}, Any[Core.Compiler.Const(1, false), Int64])
│           (@_17 = Base.iterate(%10))
│    %12  = (@_17 === nothing)::Bool
│    %13  = Base.not_int(%12)::Bool
└───        goto #21 if not %13
2 ┄─        Core.NewvarNode(:(second_spin_idx))
│           Core.NewvarNode(:(loop_length))
│           Core.NewvarNode(:(@_26))
│           Core.NewvarNode(:(sum_boundary_spins))
│           Core.NewvarNode(:(t1_e))
│           Core.NewvarNode(:(t2_s))
│           Core.NewvarNode(:(before_flipped_spins))
│           Core.NewvarNode(:(dE_loop))
│           Core.NewvarNode(:(temp_r))
│           Core.NewvarNode(:(t2_e))
│           Core.NewvarNode(:(t3_s))
│           Core.NewvarNode(:(cp_spins_idx_on_loop))
│           Core.NewvarNode(:(first_spin_idx_inv))
│           Core.NewvarNode(:(second_spin_idx_inv))
│           Core.NewvarNode(:(loop_length_inv))
│           Core.NewvarNode(:(@_39))
│           Core.NewvarNode(:(sum_boundary_spins_inv))
│           Core.NewvarNode(:(t3_e))
│    %33  = @_17::Tuple{Int64,Int64}::Tuple{Int64,Int64}
│           (i = Core.getfield(%33, 1))
│    %35  = Core.getfield(%33, 2)::Int64
│           (t1_s = Main.time_ns())
│    %37  = (1:num_spins)::Core.Compiler.PartialStruct(UnitRange{Int64}, Any[Core.Compiler.Const(1, false), Int64])
│           (first_spin_idx = Main.rand(%37))
│           (candidate_second_spin_idx = Main.zeros(Main.UInt, max_coord_num))
│    %40  = Base.getproperty(updater, :nn_coord_num)::ARRAY{UINT16,N} WHERE N
│           (nn_coord_num = Base.getindex(%40, first_spin_idx))
│    %42  = (1:nn_coord_num)::Core.Compiler.PartialStruct(UnitRange{Int64}, Any[Core.Compiler.Const(1, false), Int64])
│           (@_23 = Base.iterate(%42))
│    %44  = (@_23 === nothing)::Bool
│    %45  = Base.not_int(%44)::Bool
└───        goto #5 if not %45
3 ┄─ %47  = @_23::Tuple{Int64,Int64}::Tuple{Int64,Int64}
│           (ins = Core.getfield(%47, 1))
│    %49  = Core.getfield(%47, 2)::Int64
│    %50  = Base.getproperty(updater, :nn_sites)::Array{UInt32,2}
│    %51  = ins::Int64
│    %52  = Base.getindex(%50, %51, first_spin_idx)::UInt32
│           Base.setindex!(candidate_second_spin_idx, %52, ins)
│           (@_23 = Base.iterate(%42, %49))
│    %55  = (@_23 === nothing)::Bool
│    %56  = Base.not_int(%55)::Bool
└───        goto #5 if not %56
4 ──        goto #3
5 ┄─ %59  = candidate_second_spin_idx::ANY
│    %60  = (1:nn_coord_num)::Core.Compiler.PartialStruct(UnitRange{Int64}, Any[Core.Compiler.Const(1, false), Int64])
│    %61  = Base.getindex(%59, %60)::ANY
│           (second_spin_idx = Main.rand(%61))
│    %63  = Main.find_loop(spins, spins_idx_on_loop, updater, first_spin_idx, second_spin_idx, max_length, work, verbose)::Tuple{Int64,Tuple{Float64,Float64,Float64}}
│    %64  = Base.indexed_iterate(%63, 1)::Core.Compiler.PartialStruct(Tuple{Int64,Int64}, Any[Int64, Core.Compiler.Const(2, false)])
│           (loop_length = Core.getfield(%64, 1))
│           (@_26 = Core.getfield(%64, 2))
│    %67  = Base.indexed_iterate(%63, 2, @_26::Core.Compiler.Const(2, false))::Core.Compiler.PartialStruct(Tuple{Tuple{Float64,Float64,Float64},Int64}, Any[Tuple{Float64,Float64,Float64}, Core.Compiler.Const(3, false)])
│           (sum_boundary_spins = Core.getfield(%67, 1))
│    %69  = (loop_length == 0)::Bool
└───        goto #7 if not %69
6 ──        (@_43 = %69)
└───        goto #8
7 ── %73  = Main.mod(loop_length, 2)::Int64
└───        (@_43 = %73 !== 0)
8 ┄─        goto #10 if not @_43
9 ──        goto #19
10 ─        (num_loop_found = num_loop_found + 1)
│           (t1_e = Main.time_ns())
│           (t2_s = Main.time_ns())
│    %80  = spins_idx_on_loop::ARRAY{UINT64,N} WHERE N
│    %81  = (1:loop_length)::Core.Compiler.PartialStruct(UnitRange{Int64}, Any[Core.Compiler.Const(1, false), Int64])
│    %82  = Base.getindex(%80, %81)::Array{UInt64,1}
│    %83  = Base.getindex(spins, %82)::Array{Tuple{Float64,Float64,Float64},1}
│           (before_flipped_spins = Main.copy(%83))
│           Main.reflect_spins_on_loop!(loop_length, spins, new_spins_on_loop, spins_idx_on_loop, updater, sum_boundary_spins)
│           (dE_loop = Main.compute_dE_loop(updater, loop_length, spins_idx_on_loop, spins, new_spins_on_loop, work, verbose))
│    %87  = Random.GLOBAL_RNG::Core.Compiler.Const(Random._GLOBAL_RNG(), false)
│           (temp_r = Main.rand(%87))
│    %89  = temp_r::Float64
│    %90  = -beta::Float64
│    %91  = (%90 * dE_loop)::Float64
│    %92  = Main.exp(%91)::Float64
│    %93  = (%89 < %92)::Bool
└───        goto #12 if not %93
11 ─ %95  = new_spins_on_loop::ARRAY{TUPLE{FLOAT64,FLOAT64,FLOAT64},N} WHERE N
│    %96  = (1:loop_length)::Core.Compiler.PartialStruct(UnitRange{Int64}, Any[Core.Compiler.Const(1, false), Int64])
│    %97  = Base.getindex(%95, %96)::Array{Tuple{Float64,Float64,Float64},1}
│    %98  = spins_idx_on_loop::ARRAY{UINT64,N} WHERE N
│    %99  = (1:loop_length)::Core.Compiler.PartialStruct(UnitRange{Int64}, Any[Core.Compiler.Const(1, false), Int64])
│    %100 = Base.getindex(%98, %99)::Array{UInt64,1}
│           Base.setindex!(spins, %97, %100)
│           (num_accept = num_accept + 1)
└───        goto #13
12 ─        goto #19
13 ─        (t2_e = Main.time_ns())
│           (t3_s = Main.time_ns())
│    %107 = spins_idx_on_loop::ARRAY{UINT64,N} WHERE N
│    %108 = (1:loop_length)::Core.Compiler.PartialStruct(UnitRange{Int64}, Any[Core.Compiler.Const(1, false), Int64])
│    %109 = Base.getindex(%107, %108)::Array{UInt64,1}
│           (cp_spins_idx_on_loop = Main.copy(%109))
│           (first_spin_idx_inv = Base.getindex(spins_idx_on_loop, loop_length))
│    %112 = spins_idx_on_loop::ARRAY{UINT64,N} WHERE N
│    %113 = (loop_length - 1)::Int64
│           (second_spin_idx_inv = Base.getindex(%112, %113))
│    %115 = Main.find_loop(spins, spins_idx_on_loop, updater, first_spin_idx_inv, second_spin_idx_inv, max_length, work, verbose)::Tuple{Int64,Tuple{Float64,Float64,Float64}}
│    %116 = Base.indexed_iterate(%115, 1)::Core.Compiler.PartialStruct(Tuple{Int64,Int64}, Any[Int64, Core.Compiler.Const(2, false)])
│           (loop_length_inv = Core.getfield(%116, 1))
│           (@_39 = Core.getfield(%116, 2))
│    %119 = Base.indexed_iterate(%115, 2, @_39::Core.Compiler.Const(2, false))::Core.Compiler.PartialStruct(Tuple{Tuple{Float64,Float64,Float64},Int64}, Any[Tuple{Float64,Float64,Float64}, Core.Compiler.Const(3, false)])
│           (sum_boundary_spins_inv = Core.getfield(%119, 1))
│    %121 = spins_idx_on_loop::ARRAY{UINT64,N} WHERE N
│    %122 = (1:loop_length)::Core.Compiler.PartialStruct(UnitRange{Int64}, Any[Core.Compiler.Const(1, false), Int64])
│    %123 = Base.getindex(%121, %122)::Array{UInt64,1}
│    %124 = Main.reverse(%123)::Array{UInt64,1}
│    %125 = (%124 != cp_spins_idx_on_loop)::Bool
└───        goto #15 if not %125
14 ─        (@_44 = %125)
└───        goto #16
15 ─        (@_44 = loop_length !== loop_length_inv)
16 ┄        goto #18 if not @_44
17 ─        Base.setindex!(spins, before_flipped_spins, cp_spins_idx_on_loop)
│           (num_loop_found = num_loop_found - 1)
│           (num_accept = num_accept - 1)
└───        goto #19
18 ─        (t3_e = Main.time_ns())
└───        (dE = dE + dE_loop)
19 ┄        (@_17 = Base.iterate(%10, %35))
│    %138 = (@_17 === nothing)::Bool
│    %139 = Base.not_int(%138)::Bool
└───        goto #21 if not %139
20 ─        goto #2
21 ┄ %142 = dE::Float64
│    %143 = (num_loop_found / num_trial)::Float64
│    %144 = (num_accept / num_trial)::Float64
│    %145 = Core.tuple(%142, %143, %144)::Tuple{Float64,Float64,Float64}
└───        return %145
Overhead ╎ [+additional indent] Count File:Line; Function
=========================================================
 1╎1   @Base/array.jl:319; copyto!(::Array{Float64,1}, ::Int64, ::Array{Float64,1}, ::Int64, ::Int64)
  ╎281 @Base/client.jl:484; _start()
  ╎ 281 @Base/client.jl:288; exec_options(::Base.JLOptions)
  ╎  281 @Base/Base.jl:377; include(::Module, ::String)
  ╎   281 /Users/hiroshi/git/lecture/julia/profile_loop_update.jl:128; profile_loop_update(::String)
  ╎    281 /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.4/Profile/src/Profile.jl:28; macro expansion
 2╎     3   /Users/hiroshi/git/lecture/julia/loop_update.jl:228; multi_loop_update!(::LoopUpdater{Tuple{Float64,Float64,Float64}}, ::Int64, ::SingleSpinFlipUpdater, ::Float64, ::Int64, ::Array{Tuple{Float64,Float64,Float64},1}, ::Bool)
  ╎    ╎ 1   @Base/array.jl:500; zeros(::Type{UInt64}, ::UInt16)
  ╎    ╎  1   @Base/array.jl:504; zeros
  ╎    ╎   1   @Base/baseext.jl:25; Array
  ╎    ╎    1   @Base/boot.jl:414; Array
 1╎    ╎     1   @Base/boot.jl:405; Array
 1╎     2   /Users/hiroshi/git/lecture/julia/loop_update.jl:233; multi_loop_update!(::LoopUpdater{Tuple{Float64,Float64,Float64}}, ::Int64, ::SingleSpinFlipUpdater, ::Float64, ::Int64, ::Array{Tuple{Float64,Float64,Float64},1}, ::Bool)
  ╎    ╎ 1   @Base/array.jl:795; getindex(::Array{UInt64,1}, ::UnitRange{Int64})
  ╎    ╎  1   @Base/array.jl:360; similar
 1╎    ╎   1   @Base/boot.jl:405; Array
  ╎     131 /Users/hiroshi/git/lecture/julia/loop_update.jl:235; multi_loop_update!(::LoopUpdater{Tuple{Float64,Float64,Float64}}, ::Int64, ::SingleSpinFlipUpdater, ::Float64, ::Int64, ::Array{Tuple{Float64,Float64,Float64},1}, ::Bool)
 4╎    ╎ 131 /Users/hiroshi/git/lecture/julia/loop_update.jl:35; find_loop(::Array{Tuple{Float64,Float64,Float64},1}, ::Array{UInt64,1}, ::SingleSpinFlipUpdater, ::Int64, ::UInt64, ::Int64, ::Array{Int64,1}, ::Bool)
 1╎    ╎  1   /Users/hiroshi/git/lecture/julia/loop_update.jl:0; find_loop(::Array{Tuple{Float64,Float64,Float64},1}, ::Array{UInt64,1}, ::SingleSpinFlipUpdater, ::Int64, ::UInt64, ::Int64, ::Array{Int64,1}, ::Bool, ::Bool)
 1╎    ╎  1   /Users/hiroshi/git/lecture/julia/loop_update.jl:35; find_loop(::Array{Tuple{Float64,Float64,Float64},1}, ::Array{UInt64,1}, ::SingleSpinFlipUpdater, ::Int64, ::UInt64, ::Int64, ::Array{Int64,1}, ::Bool, ::Bool)
 2╎    ╎  2   /Users/hiroshi/git/lecture/julia/loop_update.jl:48; find_loop(::Array{Tuple{Float64,Float64,Float64},1}, ::Array{UInt64,1}, ::SingleSpinFlipUpdater, ::Int64, ::UInt64, ::Int64, ::Array{Int64,1}, ::Bool, ::Bool)
  ╎    ╎  1   /Users/hiroshi/git/lecture/julia/loop_update.jl:65; find_loop(::Array{Tuple{Float64,Float64,Float64},1}, ::Array{UInt64,1}, ::SingleSpinFlipUpdater, ::Int64, ::UInt64, ::Int64, ::Array{Int64,1}, ::Bool, ::Bool)
 1╎    ╎   1   @Base/Base.jl:0; getproperty
 4╎    ╎  4   /Users/hiroshi/git/lecture/julia/loop_update.jl:68; find_loop(::Array{Tuple{Float64,Float64,Float64},1}, ::Array{UInt64,1}, ::SingleSpinFlipUpdater, ::Int64, ::UInt64, ::Int64, ::Array{Int64,1}, ::Bool, ::Bool)
23╎    ╎  28  /Users/hiroshi/git/lecture/julia/loop_update.jl:80; find_loop(::Array{Tuple{Float64,Float64,Float64},1}, ::Array{UInt64,1}, ::SingleSpinFlipUpdater, ::Int64, ::UInt64, ::Int64, ::Array{Int64,1}, ::Bool, ::Bool)
 2╎    ╎   4   @Base/multidimensional.jl:543; getindex(::Array{Tuple{Float64,Float64,Float64},1}, ::UInt64)
 1╎    ╎    1   @Base/array.jl:787; getindex
 1╎    ╎    1   @Base/multidimensional.jl:543; getindex
  ╎    ╎   1   /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/generic.jl:871; dot(::Tuple{Float64,Float64,Float64}, ::Tuple{Float64,Float64,Float64})
 1╎    ╎    1   @Base/tuple.jl:61; iterate
 4╎    ╎  11  /Users/hiroshi/git/lecture/julia/loop_update.jl:83; find_loop(::Array{Tuple{Float64,Float64,Float64},1}, ::Array{UInt64,1}, ::SingleSpinFlipUpdater, ::Int64, ::UInt64, ::Int64, ::Array{Int64,1}, ::Bool, ::Bool)
  ╎    ╎   3   @Base/array.jl:795; getindex(::Array{Float64,1}, ::UnitRange{Int64})
  ╎    ╎    3   @Base/array.jl:360; similar
 3╎    ╎     3   @Base/boot.jl:405; Array
  ╎    ╎   1   @Base/reducedim.jl:817; findmax(::Array{Float64,1})
  ╎    ╎    1   @Base/reducedim.jl:817; #findmax#610
  ╎    ╎     1   @Base/array.jl:2121; _findmax
 1╎    ╎    ╎ 1   @Base/float.jl:456; !=
 3╎    ╎   3   @Base/tuple.jl:24; getindex
 5╎    ╎  11  /Users/hiroshi/git/lecture/julia/loop_update.jl:84; find_loop(::Array{Tuple{Float64,Float64,Float64},1}, ::Array{UInt64,1}, ::SingleSpinFlipUpdater, ::Int64, ::UInt64, ::Int64, ::Array{Int64,1}, ::Bool, ::Bool)
  ╎    ╎   6   @Base/array.jl:795; getindex(::Array{UInt64,1}, ::UnitRange{Int64})
  ╎    ╎    6   @Base/array.jl:360; similar
 6╎    ╎     6   @Base/boot.jl:405; Array
 8╎    ╎  8   /Users/hiroshi/git/lecture/julia/loop_update.jl:87; find_loop(::Array{Tuple{Float64,Float64,Float64},1}, ::Array{UInt64,1}, ::SingleSpinFlipUpdater, ::Int64, ::UInt64, ::Int64, ::Array{Int64,1}, ::Bool, ::Bool)
23╎    ╎  50  /Users/hiroshi/git/lecture/julia/loop_update.jl:90; find_loop(::Array{Tuple{Float64,Float64,Float64},1}, ::Array{UInt64,1}, ::SingleSpinFlipUpdater, ::Int64, ::UInt64, ::Int64, ::Array{Int64,1}, ::Bool, ::Bool)
 1╎    ╎   21  @Base/broadcast.jl:1238; broadcasted(::Function, ::Tuple{Float64,Float64,Float64}, ::Tuple{Float64,Float64,Float64})
20╎    ╎    20  @Base/broadcast.jl:1240; broadcasted
 6╎    ╎   6   @Base/broadcast.jl:820; materialize
 3╎    ╎  3   /Users/hiroshi/git/lecture/julia/loop_update.jl:94; find_loop(::Array{Tuple{Float64,Float64,Float64},1}, ::Array{UInt64,1}, ::SingleSpinFlipUpdater, ::Int64, ::UInt64, ::Int64, ::Array{Int64,1}, ::Bool, ::Bool)
 7╎    ╎  7   /Users/hiroshi/git/lecture/julia/loop_update.jl:102; find_loop(::Array{Tuple{Float64,Float64,Float64},1}, ::Array{UInt64,1}, ::SingleSpinFlipUpdater, ::Int64, ::UInt64, ::Int64, ::Array{Int64,1}, ::Bool, ::Bool)
  ╎     1   /Users/hiroshi/git/lecture/julia/loop_update.jl:249; multi_loop_update!(::LoopUpdater{Tuple{Float64,Float64,Float64}}, ::Int64, ::SingleSpinFlipUpdater, ::Float64, ::Int64, ::Array{Tuple{Float64,Float64,Float64},1}, ::Bool)
 1╎    ╎ 1   @Base/array.jl:352; copy
  ╎     138 /Users/hiroshi/git/lecture/julia/loop_update.jl:250; multi_loop_update!(::LoopUpdater{Tuple{Float64,Float64,Float64}}, ::Int64, ::SingleSpinFlipUpdater, ::Float64, ::Int64, ::Array{Tuple{Float64,Float64,Float64},1}, ::Bool)
  ╎    ╎ 82  /Users/hiroshi/git/lecture/julia/loop_update.jl:136; reflect_spins_on_loop!(::Int64, ::Array{Tuple{Float64,Float64,Float64},1}, ::Array{Tuple{Float64,Float64,Float64},1}, ::Array{UInt64,1}, ::SingleSpinFlipUpdater, ::Tuple{Float64,Float64,Float64})
  ╎    ╎  3   @Base/array.jl:603; collect
  ╎    ╎   3   @Base/array.jl:609; _collect
  ╎    ╎    3   @Base/array.jl:576; _similar_for
  ╎    ╎     3   @Base/abstractarray.jl:628; similar
  ╎    ╎    ╎ 3   @Base/abstractarray.jl:636; similar
  ╎    ╎    ╎  3   @Base/boot.jl:414; Array
 3╎    ╎    ╎   3   @Base/boot.jl:405; Array
 1╎    ╎  1   @Base/array.jl:787; getindex
  ╎    ╎  77  @Base/arraymath.jl:52; *(::Int64, ::Array{Float64,1})
  ╎    ╎   77  @Base/broadcast.jl:809; broadcast_preserving_zero_d
  ╎    ╎    77  @Base/broadcast.jl:820; materialize
  ╎    ╎     77  @Base/broadcast.jl:840; copy
  ╎    ╎    ╎ 77  @Base/broadcast.jl:196; similar
  ╎    ╎    ╎  77  @Base/abstractarray.jl:670; similar
  ╎    ╎    ╎   77  @Base/abstractarray.jl:671; similar
  ╎    ╎    ╎    77  @Base/boot.jl:422; Array
  ╎    ╎    ╎     77  @Base/boot.jl:414; Array
77╎    ╎    ╎    ╎ 77  @Base/boot.jl:405; Array
  ╎    ╎  1   @Base/multidimensional.jl:543; getindex
 1╎    ╎   1   @Base/array.jl:787; getindex
  ╎    ╎ 1   /Users/hiroshi/git/lecture/julia/loop_update.jl:140; reflect_spins_on_loop!(::Int64, ::Array{Tuple{Float64,Float64,Float64},1}, ::Array{Tuple{Float64,Float64,Float64},1}, ::Array{UInt64,1}, ::SingleSpinFlipUpdater, ::Tuple{Float64,Float64,Float64})
  ╎    ╎  1   @Base/array.jl:603; collect
  ╎    ╎   1   @Base/array.jl:609; _collect
  ╎    ╎    1   @Base/array.jl:576; _similar_for
  ╎    ╎     1   @Base/abstractarray.jl:628; similar
  ╎    ╎    ╎ 1   @Base/abstractarray.jl:636; similar
  ╎    ╎    ╎  1   @Base/boot.jl:414; Array
 1╎    ╎    ╎   1   @Base/boot.jl:405; Array
  ╎    ╎ 3   /Users/hiroshi/git/lecture/julia/loop_update.jl:148; reflect_spins_on_loop!(::Int64, ::Array{Tuple{Float64,Float64,Float64},1}, ::Array{Tuple{Float64,Float64,Float64},1}, ::Array{UInt64,1}, ::SingleSpinFlipUpdater, ::Tuple{Float64,Float64,Float64})
  ╎    ╎  3   @Base/array.jl:603; collect
  ╎    ╎   3   @Base/array.jl:609; _collect
  ╎    ╎    3   @Base/array.jl:576; _similar_for
  ╎    ╎     3   @Base/abstractarray.jl:628; similar
  ╎    ╎    ╎ 3   @Base/abstractarray.jl:636; similar
  ╎    ╎    ╎  3   @Base/boot.jl:414; Array
 3╎    ╎    ╎   3   @Base/boot.jl:405; Array
 2╎    ╎ 52  /Users/hiroshi/git/lecture/julia/loop_update.jl:149; reflect_spins_on_loop!(::Int64, ::Array{Tuple{Float64,Float64,Float64},1}, ::Array{Tuple{Float64,Float64,Float64},1}, ::Array{UInt64,1}, ::SingleSpinFlipUpdater, ::Tuple{Float64,Float64,Float64})
 1╎    ╎  1   @Base/arraymath.jl:38; -(::Array{Float64,1}, ::Array{Float64,1})
  ╎    ╎  6   @Base/arraymath.jl:39; -(::Array{Float64,1}, ::Array{Float64,1})
  ╎    ╎   5   @Base/broadcast.jl:809; broadcast_preserving_zero_d
  ╎    ╎    5   @Base/broadcast.jl:820; materialize
  ╎    ╎     5   @Base/broadcast.jl:840; copy
  ╎    ╎    ╎ 1   @Base/broadcast.jl:864; copyto!
  ╎    ╎    ╎  1   @Base/broadcast.jl:908; copyto!
  ╎    ╎    ╎   1   @Base/broadcast.jl:891; preprocess
  ╎    ╎    ╎    1   @Base/broadcast.jl:894; preprocess_args
  ╎    ╎    ╎     1   @Base/broadcast.jl:892; preprocess
 1╎    ╎    ╎    ╎ 1   @Base/broadcast.jl:885; broadcast_unalias
  ╎    ╎    ╎ 4   @Base/broadcast.jl:196; similar
  ╎    ╎    ╎  4   @Base/abstractarray.jl:670; similar
  ╎    ╎    ╎   4   @Base/abstractarray.jl:671; similar
  ╎    ╎    ╎    4   @Base/boot.jl:422; Array
  ╎    ╎    ╎     4   @Base/boot.jl:414; Array
 4╎    ╎    ╎    ╎ 4   @Base/boot.jl:405; Array
  ╎    ╎   1   @Base/broadcast.jl:810; broadcast_preserving_zero_d
  ╎    ╎    1   @Base/broadcast.jl:206; axes
  ╎    ╎     1   @Base/broadcast.jl:208; _axes
  ╎    ╎    ╎ 1   @Base/broadcast.jl:473; combine_axes
  ╎    ╎    ╎  1   @Base/broadcast.jl:474; combine_axes
  ╎    ╎    ╎   1   @Base/abstractarray.jl:75; axes
  ╎    ╎    ╎    1   @Base/tuple.jl:157; map
  ╎    ╎    ╎     1   @Base/range.jl:320; OneTo
  ╎    ╎    ╎    ╎ 1   @Base/range.jl:311; OneTo
 1╎    ╎    ╎    ╎  1   @Base/promotion.jl:409; max
  ╎    ╎  2   @Base/operators.jl:529; *
  ╎    ╎   2   @Base/arraymath.jl:52; *(::Float64, ::Array{Float64,1})
  ╎    ╎    2   @Base/broadcast.jl:809; broadcast_preserving_zero_d
  ╎    ╎     2   @Base/broadcast.jl:820; materialize
  ╎    ╎    ╎ 2   @Base/broadcast.jl:840; copy
  ╎    ╎    ╎  2   @Base/broadcast.jl:196; similar
  ╎    ╎    ╎   2   @Base/abstractarray.jl:670; similar
  ╎    ╎    ╎    2   @Base/abstractarray.jl:671; similar
  ╎    ╎    ╎     2   @Base/boot.jl:422; Array
  ╎    ╎    ╎    ╎ 2   @Base/boot.jl:414; Array
 2╎    ╎    ╎    ╎  2   @Base/boot.jl:405; Array
  ╎    ╎  32  @Base/tuple.jl:230; Tuple
29╎    ╎   32  @Base/tuple.jl:258; _totuple
  ╎    ╎    3   @Base/array.jl:605; collect
  ╎    ╎     3   @Base/array.jl:621; _collect_indices
  ╎    ╎    ╎ 1   @Base/array.jl:330; copyto!
 1╎    ╎    ╎  1   @Base/array.jl:313; copyto!(::Array{Float64,1}, ::Int64, ::Array{Float64,1}, ::Int64, ::Int64)
  ╎    ╎    ╎ 2   @Base/boot.jl:422; Array
  ╎    ╎    ╎  2   @Base/boot.jl:414; Array
 2╎    ╎    ╎   2   @Base/boot.jl:405; Array
  ╎    ╎  6   /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/generic.jl:1657; normalize
 1╎    ╎   3   /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/generic.jl:1657; normalize(::Array{Float64,1}, ::Int64)
  ╎    ╎    2   /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/generic.jl:607; norm(::Array{Float64,1}, ::Int64)
  ╎    ╎     2   /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/dense.jl:105; norm2(::Array{Float64,1})
  ╎    ╎    ╎ 1   /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/generic.jl:477; generic_norm2(::Array{Float64,1})
  ╎    ╎    ╎  1   /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/generic.jl:536; normInf
 1╎    ╎    ╎   1   /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/generic.jl:452; generic_normInf
 1╎    ╎    ╎ 1   /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/generic.jl:481; generic_norm2(::Array{Float64,1})
  ╎    ╎   3   /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/generic.jl:1659; normalize(::Array{Float64,1}, ::Int64)
  ╎    ╎    3   /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/LinearAlgebra.jl:347; copy_oftype
 3╎    ╎     3   @Base/array.jl:352; copy
 1╎    ╎  2   /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/matmul.jl:9; dot
 1╎    ╎   1   /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/blas.jl:330; dot(::Array{Float64,1}, ::Array{Float64,1})
 1╎     6   /Users/hiroshi/git/lecture/julia/loop_update.jl:251; multi_loop_update!(::LoopUpdater{Tuple{Float64,Float64,Float64}}, ::Int64, ::SingleSpinFlipUpdater, ::Float64, ::Int64, ::Array{Tuple{Float64,Float64,Float64},1}, ::Bool)
 2╎    ╎ 2   @Base/array.jl:0; compute_dE_loop(::SingleSpinFlipUpdater, ::Int64, ::Array{UInt64,1}, ::Array{Tuple{Float64,Float64,Float64},1}, ::Array{Tuple{Float64,Float64,Float64},1}, ::Array{Int64,1}, ::Bool)
  ╎    ╎ 2   /Users/hiroshi/git/lecture/julia/loop_update.jl:177; compute_dE_loop(::SingleSpinFlipUpdater, ::Int64, ::Array{UInt64,1}, ::Array{Tuple{Float64,Float64,Float64},1}, ::Array{Tuple{Float64,Float64,Float64},1}, ::Array{Int64,1}, ::Bool)
 1╎    ╎  2   @Base/multidimensional.jl:543; getindex
 1╎    ╎   1   @Base/array.jl:787; getindex(::Array{UInt16,1}, ::Int64)
  ╎    ╎ 1   /Users/hiroshi/git/lecture/julia/loop_update.jl:189; compute_dE_loop(::SingleSpinFlipUpdater, ::Int64, ::Array{UInt64,1}, ::Array{Tuple{Float64,Float64,Float64},1}, ::Array{Tuple{Float64,Float64,Float64},1}, ::Array{Int64,1}, ::Bool)
 1╎    ╎  1   @Base/float.jl:401; +
 1╎1   /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/generic.jl:856; dot(::Tuple{Float64,Float64,Float64}, ::Tuple{Float64,Float64,Float64})
Total snapshots: 292
2020年 5月 8日 金曜日 19時03分14秒 JST
